plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.2'
	id 'io.spring.dependency-management' version '1.1.6'
}

group = 'com.jsonepick'
version = '1.0.0'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
	mavenCentral()
    maven { url 'https://jitpack.io' }
}

dependencies {
	//implementation 'org.springframework.boot:spring-boot-starter'
    //implementation 'org.springframework.boot:spring-boot-starter-data-mongodb-reactive'
    //implementation 'org.springframework.boot:spring-boot-starter-security'
    //implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'com.github.iamport:iamport-rest-client-java:0.2.21'
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    //implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    implementation 'com.fasterxml.jackson.core:jackson-core'
    implementation 'com.sun.xml.bind:jaxb1-impl:2.2.5.1'
    //implementation 'org.modelmapper:modelmapper:3.1.0'
    implementation 'javax.xml.bind:jaxb-api:2.3.1'
    implementation 'io.jsonwebtoken:jjwt:0.9.1'
    implementation 'com.sun.xml.bind:jaxb-core'
    implementation 'commons-io:commons-io:2.7'

    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    implementation 'org.webjars:webjars-locator-core'
    implementation 'org.webjars:sockjs-client:1.0.2'
    implementation 'org.webjars:stomp-websocket:2.3.3'

    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    //runtimeOnly 'com.oracle.database.jdbc:ojdbc8'
    //runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'

    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor 'org.projectlombok:lombok'

    testImplementation 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'
	
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
	useJUnitPlatform()
}

// React Build Setting
def reactDir = "$projectDir/src/main/webapp/front"

sourceSets {
	main {
		resources {
			srcDirs = ["$projectDir/src/main/resources"]
		}
	}
}

processResources { dependsOn "copyReactBuildFiles" }

task installReact(type : Exec) {
	workingDir "$reactDir"
	inputs.dir "$reactDir"
	group = BasePlugin.BUILD_GROUP
	if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
		commandLine "npm.cmd", "audit", "fix"
		commandLine 'npm.cmd', 'install'
	} else {
		commandLine "npm", "audit", "fix"
		commandLine 'npm', 'install'
	}
}

task buildReact(type : Exec) {
	dependsOn "installReact"
	workingDir "$reactDir"
	inputs.dir "$reactDir"
	group = BasePlugin.BUILD_GROUP
	if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
		commandLine "npm.cmd", "run-script", "build"
	} else {
		commandLine "npm", "run-script", "build"
	}
}

task copyReactBuildFiles(type : Copy) {
	dependsOn "buildReact"
	from "$reactDir/build"
	into "$reactDir/src/main/resources/static"
}